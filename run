#!/bin/bash

# Check if the number of command line arguments is less than 1
if [ $# -lt 1 ]; then
    echo "Usage: $0 <file_path> <url> [install] [test] [dev]"
    exit 1
fi

# Obtain command line argument
arg=$1

echo "Argument: $arg";

# Install dependencies
if [ $arg == "install" ]; then
    echo "Running npm install..."
    npm install
    exit 0
fi

# Run the test suite
if [ $arg == "test" ]; then
    echo "Running npm test..."
    # Run Jest and capture the output
    npx jest --coverage --json --outputFile=jest-results.json

    # Extract the required information from the Jest JSON output
    total=$(jq '.numTotalTests' jest-results.json)
    passed=$(jq '.numPassedTests' jest-results.json)
    
    # Debugging: Print the coverageMap to understand its structure
    echo "Coverage Map:"
    jq '.coverageMap' jest-results.json

    # Calculate coverage percentage
    coverage=$(jq '[.coverageMap | to_entries[] | .value.lines.pct // 0] | add / length' jest-results.json)
    
    # Handle case where coverage is null
    if [ "$coverage" == "null" ]; then
        coverage="N/A"
    fi

    # Print the formatted output
    echo "Total: $total"
    echo "Passed: $passed"
    echo "Coverage: $coverage"
    echo "$passed/$total test cases passed. $coverage% line coverage achieved."
    exit 0
fi

# Run the development server
if [ $arg == "dev" ]; then
    echo "Running npm run dev..."
    npm run dev
    exit 0
fi

# Check if the argument is a file path
if [ -f $arg ]; then
    echo "Argument is a file path: $arg"
    # Compile TS files
    npm run build
    # Pass the file path index.js
    node dist/index.js --file "$arg"
    exit 0
fi

# Otherwise, assume the argument is a URL
echo "Argument is a URL: $arg"
# Compile TS files
npm run build
# Pass the URL to index.js
node dist/index.js --url "$arg"